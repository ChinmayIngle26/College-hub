
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User Profiles
    match /users/{userId} {
      // Allow user to create their own profile document (e.g., on signup)
      // User can set their own initial data, including role (which should default to 'student' on client)
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Allow user to read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow user to update their own profile
      // Consider restricting which fields they can update if necessary
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Allow user to delete their own profile (less common, implement with caution)
      // allow delete: if request.auth != null && request.auth.uid == userId;

      // Admin access to user profiles
      // Admin can list all user documents if their email is admin@gmail.com OR their custom claim/document role is 'admin'
      allow list: if request.auth != null && 
                      (request.auth.token.email == "admin@gmail.com" || 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      // Admin can read any user document
      allow get: if request.auth != null && 
                     (request.auth.token.email == "admin@gmail.com" || 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Admin can create, update, or delete any user document
      allow write: if request.auth != null && 
                      (request.auth.token.email == "admin@gmail.com" || 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // System Settings
    // The 'appConfiguration' document under 'systemSettings' should be publicly readable
    // for metadata generation (e.g., in layout.tsx), but writable only by admin.
    match /systemSettings/appConfiguration {
      allow read: if true; // Publicly readable for application name, etc.
      allow write: if request.auth != null && 
                       (request.auth.token.email == "admin@gmail.com" || 
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Deny direct access to other documents in systemSettings unless specified
    match /systemSettings/{otherDocId} {
        allow read, write: if false;
    }

    // Default deny for any other paths not explicitly matched
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
