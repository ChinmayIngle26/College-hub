
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    match /users/{userId} {
      // Allow reads if the user is authenticated.
      allow read: if request.auth != null;

      // Allow create only if the user is creating their own document
      // and they are setting their role to 'student' by default.
      // All specified fields must be present during creation.
      allow create: if request.auth != null && request.auth.uid == userId &&
                       request.resource.data.role == 'student' &&
                       request.resource.data.keys().hasAll(['name', 'studentId', 'major', 'email', 'parentEmail', 'role']) &&
                       request.resource.data.name is string &&
                       request.resource.data.studentId is string &&
                       request.resource.data.major is string &&
                       request.resource.data.email is string &&
                       request.resource.data.parentEmail is string;


      // Allow updates if the user is updating their own document.
      // Users can only update specific fields. They cannot change their role.
      allow update: if request.auth != null && request.auth.uid == userId &&
                       !(request.resource.data.role is string && request.resource.data.role != resource.data.role) && // Prevent role change by user
                       request.resource.data.keys().hasOnly(['name', 'studentId', 'major', 'email', 'parentEmail']); // Fields they can update


      // Allow deletes if the user is deleting their own document (generally restrictive)
      // or if an admin is deleting the document.
      allow delete: if request.auth != null &&
                      (request.auth.uid == userId ||
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Disallow access to any subcollections under a user document for now.
      match /{document=**} {
        allow read, write: if false;
      }
    }

    // System Settings collection
    match /systemSettings/{docId} {
      // Allow public read for the appConfiguration document.
      // This is crucial for metadata generation and middleware which might run unauthenticated.
      allow read: if docId == 'appConfiguration';

      // Allow writes (create, update, delete) only if the user is an admin.
      // Admin check can be based on a custom claim 'admin' set to true, or by a specific email.
      allow write: if request.auth != null &&
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
                       request.auth.token.email == 'admin@gmail.com');


      // Disallow access to any subcollections under a systemSettings document.
      match /{document=**} {
        allow read, write: if false;
      }
    }

    // Leave Applications collection
    match /leaveApplications/{applicationId} {
      // Allow create if the user is authenticated and is creating an application for themselves.
      // Ensure all required fields are present and status is 'Pending'.
      allow create: if request.auth != null &&
                       request.resource.data.studentId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['studentId', 'studentName', 'parentEmail', 'leaveType', 'startDate', 'endDate', 'reason', 'status', 'appliedAt']) &&
                       request.resource.data.status == 'Pending';

      // Allow read if the user is authenticated and is the owner of the application,
      // OR if the user is an admin.
      allow read: if request.auth != null &&
                     (request.auth.uid == resource.data.studentId ||
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Allow update (e.g., status change by admin).
      // Only admins can update the application.
      // Ensure only expected fields are part of the update.
      allow update: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';


      // Allow delete if the user is an admin.
      allow delete: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Disallow access to any subcollections under a leaveApplication document.
      match /{document=**} {
        allow read, write: if false;
      }
    }
  }
}
