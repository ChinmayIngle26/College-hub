rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if the requesting user is an admin
    // An admin is an authenticated user whose document in the 'users' collection
    // has a 'role' field set to 'admin'.
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection
    // /users/{userId}
    match /users/{userId} {
      // Authenticated users can get their own document (e.g., for profile page, dashboard)
      allow get: if request.auth != null && request.auth.uid == userId;

      // Authenticated users can create their own document (e.g., during signup)
      // and update their own document (e.g., to edit their profile).
      allow create, update: if request.auth != null && request.auth.uid == userId;
      // Note: 'write' is a shorthand for create, update, delete.
      // We separate them here for clarity. 'delete' for self is usually not allowed unless explicitly needed.

      // Admins have full read (get, list) and write (create, update, delete) access to all user documents.
      allow read, write: if isAdmin();
    }

    // Announcements collection
    // /announcements/{announcementId}
    match /announcements/{announcementId} {
      // Allow anyone (even unauthenticated users) to read announcements.
      // Change to `if request.auth != null;` if only authenticated users should read.
      allow read: if true;
      // Only admins can create, update, or delete announcements.
      allow write: if isAdmin();
    }

    // Placeholder rules for other collections if they were to use Firestore
    // (Currently, services like attendance and grades use mock data)

    /*
    // Attendance:
    // /attendance/{userId}/{recordId}
    match /attendance/{userId}/{recordId} {
      // Users can read and write their own attendance records
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Admins can read all attendance records
      allow read: if isAdmin(); // Overlaps with user's own read, but fine.
    }

    // Grades:
    // /grades/{userId}/{gradeId}
    match /grades/{userId}/{gradeId} {
      // Users can read and write their own grades
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Admins can read all grades
      allow read: if isAdmin();
    }

    // Appointments:
    // /appointments/{userId}/{appointmentId}
    match /appointments/{userId}/{appointmentId} {
      // Users can read and write their own appointments
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Admins might need read access depending on requirements
      // allow read: if isAdmin();
    }

    // Voting System: Rules would be more complex
    // Example:
    // /elections/{electionId}
    // match /elections/{electionId} {
    //   allow read: if request.auth != null; // Authenticated users can view elections
    //   allow write: if isAdmin(); // Admins manage elections
    // }
    // /elections/{electionId}/votes/{userId}
    // match /elections/{electionId}/votes/{userId} {
    //   // Users can create their own vote, but not read others directly or update.
    //   allow create: if request.auth != null && request.auth.uid == userId;
    // }
    */
  }
}
