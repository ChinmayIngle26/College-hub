
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // Rules for individual user documents
    match /users/{userId} {
      // Allow a user to read their own document.
      // Also allow an admin to read any user document (needed for viewing details if implemented).
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );

      // Allow a user to create their own document (e.g., during signup).
      // Also allow an admin to create any user document (e.g., from admin panel).
      // The `request.resource.data.role` check ensures that when a user creates their own doc,
      // they can only set their role to 'student' or if the role field is not provided.
      // Admins can set any role.
      allow create: if request.auth != null && (
        (request.auth.uid == userId && (request.resource.data.role == 'student' || !('role' in request.resource.data))) ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );

      // Allow a user to update their own document, but NOT their role.
      // Allow an admin to update any user document, INCLUDING their role.
      allow update: if request.auth != null && (
        (request.auth.uid == userId && !(request.resource.data.role != resource.data.role)) || // User can update, but not their own role
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'  // Admin can update anything
      );

      // Allow an admin to delete any user document.
      // Users cannot delete their own accounts directly through this rule.
      allow delete: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rule for the entire 'users' collection (for list operations)
    // Allow admins to list all users (e.g., for the admin panel's user table).
    match /users/{document=**} { // This wildcard match is for collection-group queries or listing the collection.
                                 // Firestore's `list` permission is typically what getDocs() needs on a collection.
      allow list: if request.auth != null &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // If you add other collections (e.g., attendance, grades, announcements) in Firestore,
    // you will need to add rules for them here.
    // Example for a hypothetical 'tasks' collection where users manage their own tasks:
    // match /tasks/{taskId} {
    //   allow read, write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    // }
    //
    // Example for a public 'config' document:
    // match /app_config/settings {
    //  allow read: if true;
    //  allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    // }

    // Default deny all other paths if not explicitly allowed.
    // This is implicit but can be made explicit:
    // match /{path=**}/documents {
    //   allow read, write: if false;
    // }
  }
}
