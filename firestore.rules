
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isStudent() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    function isFaculty() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }

    function isAdmin() {
      return isAuthenticated() && (
        request.auth.token.email == "admin@gmail.com" ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Function to check if user is owner of a specific classroom document
    function isClassroomOwner(classroomId) {
      let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return request.auth.uid == classroom.ownerFacultyId;
    }
    
    // Function to check if user is either owner or invited faculty for a specific classroom document
    function isOwnerOrInvitedFaculty(classroomId) {
      let classroomDoc = get(/databases/$(database)/documents/classrooms/$(classroomId));
      // Check if classroom document exists and has data
      if (!classroomDoc.exists()) {
        return false;
      }
      let classroomData = classroomDoc.data;
      // Ensure invitedFacultyIds is treated as a list, even if null or undefined
      let invitedIds = classroomData.invitedFacultyIds != null ? classroomData.invitedFacultyIds : [];
      return request.auth.uid == classroomData.ownerFacultyId || (request.auth.uid in invitedIds);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin() || isFaculty()); // Faculty can read student profiles for classroom management
      allow list: if isAdmin();
      allow create: if isAuthenticated() || isAdmin(); // Sign up or admin creation
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // System Settings
    match /systemSettings/appConfiguration {
      allow read: if true; // Allow all users to read system settings
      allow write: if isAdmin(); // Only admins can change system settings
    }
    
    // Profile Change Requests
    match /profileChangeRequests/{requestId} {
      allow read, list: if isAdmin(); // Only admins can see requests
      allow create: if isStudent() && request.auth.uid == request.resource.data.userId; // Students can create their own
      allow update: if isAdmin(); // Admins can update (approve/deny)
      allow delete: if isAdmin(); 
    }
    
    // Classrooms Collection
    match /classrooms/{classroomId} {
      allow read: if isFaculty() && isOwnerOrInvitedFaculty(classroomId); // Owner or invited faculty can read.
      allow list: if isFaculty(); // Faculty can list classrooms they are part of (client filters this further)
      allow create: if isFaculty() && request.auth.uid == request.resource.data.ownerFacultyId; // Creator must be owner
      allow update: if isFaculty() && isClassroomOwner(classroomId); // Only owner can update (e.g., invite others)
      allow delete: if isFaculty() && isClassroomOwner(classroomId); // Only owner can delete
    }
    
    // Lecture Attendance Collection
    match /lectureAttendance/{recordId} {
      allow read: if (isStudent() && request.auth.uid == resource.data.studentId) || 
                       (isFaculty() && isOwnerOrInvitedFaculty(resource.data.classroomId));
                       // Student can read their own, faculty can read for their classrooms.
      allow list: if isFaculty(); // Faculty can list broadly, client filters.
      allow create: if isFaculty() && 
                       request.auth.uid == request.resource.data.facultyId && 
                       isOwnerOrInvitedFaculty(request.resource.data.classroomId); // Faculty submitting must be the one in record and associated with class.
      allow update, delete: if false; // Generally, attendance records are immutable once created.
    }
  }
}
