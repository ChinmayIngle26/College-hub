rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the owner
    function isSelf(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the user is the admin
    function isAdmin() {
      return request.auth.token.email == "admin@gmail.com";
    }

    // Users Collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isSelf(userId) && isValidUserCreate();
      allow update: if request.auth != null && (isSelf(userId) || isAdmin()) && isValidUserUpdate();
      allow delete: if request.auth != null && isAdmin();

      // Validation for user creation
      function isValidUserCreate() {
        return request.resource.data.keys().toSet() == ["name", "studentId", "major", "email", "role"].toSet()
        && request.resource.data.name is string
        && request.resource.data.studentId is string
        && request.resource.data.major is string
        && request.resource.data.email is string
        && request.resource.data.role == 'student'; // Only admins can set other roles
      }

      // Validation for user updates
      function isValidUserUpdate() {
         return request.resource.data.keys().toSet().subset(["name", "studentId", "major", "email", "role"].toSet())
             && ( ("name" in request.resource.data && request.resource.data.name is string) || !("name" in request.resource.data) )
             && ( ("studentId" in request.resource.data && request.resource.data.studentId is string) || !("studentId" in request.resource.data) )
             && ( ("major" in request.resource.data && request.resource.data.major is string) || !("major" in request.resource.data) )
             && ( ("email" in request.resource.data && request.resource.data.email is string) || !("email" in request.resource.data) )
             && ( ("role" in request.resource.data && request.resource.data.role in ["student", "admin"]) || !("role" in request.resource.data) ) ;
      }

      match /{document=**} {
        allow read, write: if false;
      }
    }

    // System Settings Collection
    match /systemSettings/{document} {
      allow read: if request.auth != null;
      allow create: if isAdmin() && isValidSettings();
      allow update: if isAdmin() && isValidSettings();
      allow delete: if isAdmin();

       function isValidSettings() {
        return request.resource.data.keys().toSet().subset(["maintenanceMode", "allowNewUserRegistration", "applicationName", "announcementTitle", "announcementContent", "defaultItemsPerPage", "lastUpdated"].toSet())
            && request.resource.data.maintenanceMode is bool
            && request.resource.data.allowNewUserRegistration is bool
            && request.resource.data.applicationName is string
            && request.resource.data.announcementTitle is string
            && request.resource.data.announcementContent is string
            && request.resource.data.defaultItemsPerPage is int;
    }

      match /{document=**} {
        allow read, write: if false;
      }
    }

    // Public Access
    match /{path=**}/documents/{document} {
      allow read: if true;
      allow write: if false;
    }
  }
}
