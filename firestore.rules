
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Users Collection ---
    match /users/{userId} {
      // Authenticated users can read their own profile, admins can read any.
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Users can create their own document upon signup.
      // Ensure client sets role to 'student' by default during signup.
      allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.role == 'student';

      // Users can update their own profile. Admins can update any profile.
      // Be cautious with what fields users can update.
      allow update: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Only admins can delete user profiles (Firestore documents). Auth user itself needs to be deleted via Firebase Admin SDK.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Prevent access to subcollections within a user document unless explicitly defined
      match /{document=**} {
        allow read, write: if false;
      }
    }

    // --- System Settings ---
    // Only one document: /systemSettings/appConfiguration
    match /systemSettings/{docId} {
      // Publicly readable for application configuration (e.g., app name for metadata, maintenance mode check by middleware)
      allow read: if true;
      // Only admins can write/update settings.
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Prevent access to subcollections within a systemSettings document
      match /{document=**} {
        allow read, write: if false;
      }
    }

    // --- Leave Applications ---
    match /leaveApplications/{applicationId} {
      // Student can read their own application. Admin can read any application.
      allow read: if request.auth != null &&
                     (request.auth.uid == resource.data.studentId ||
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Student can create an application for themselves.
      // (Creation is handled at collection level to ensure studentId matches auth.uid)
      // Admin can update (e.g., to approve/reject). Student cannot update directly.
      allow update: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Admin can delete. Student cannot delete directly.
      allow delete: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for querying the leaveApplications collection
    match /leaveApplications {
        // Students can query applications only if they filter by their own studentId.
        // Admins can query without this restriction (though client-side admin queries would be different).
        allow list: if request.auth != null &&
                       (request.query.resource.data.studentId == request.auth.uid ||
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

        allow create: if request.auth != null &&
                         request.resource.data.studentId == request.auth.uid &&
                         request.resource.data.status == 'Pending'; // Ensure new apps are 'Pending'
    }

    // --- Fallback: Deny all other reads/writes by default ---
    // This is implicitly handled if no other rules match, but can be made explicit.
    // match /{path=**}/documents/{document} {
    //   allow read, write: if false;
    // }
  }
}
