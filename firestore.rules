
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users collection
    // - Users can read their own profile.
    // - Users can update their own profile (certain fields, specific logic for updates might be in backend/Cloud Functions).
    // - Admins can read, write, create, and delete any user profile.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      // Allow students to update their own profiles.
      // More granular control over which fields can be updated by whom might be
      // enforced by backend logic or more specific rules if needed.
      // For now, if a student is an owner, they can update their document.
      // Critical fields like 'email' or 'role' change requests are handled separately.
      allow update: if isOwner(userId) || isAdmin();
      // Admins can create and delete user documents.
      allow create, delete: if isAdmin();
      // List access is typically controlled by query security rules or limited in client/server code.
      // Admins can list users.
      allow list: if isAdmin();
    }

    // Profile Change Requests collection
    // - Students can create requests for their own profile.
    // - Admins can read, list, update (approve/deny) requests.
    // - Deletion is disallowed to keep a record.
    match /profileChangeRequests/{requestId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, list, update: if isAdmin();
      allow delete: if false; // Keep a record of requests
    }

    // System Settings collection
    // - Only admins can write to system settings.
    // - All authenticated users can read system settings (e.g., for maintenance mode).
    match /systemSettings/{settingsId} {
      allow read: if request.auth != null; // Or allow unauthenticated reads if needed for pre-login checks
      allow write: if isAdmin();
    }

    // Rules for Leave Applications (REMOVED FEATURE - Keeping for historical reference if re-added)
    // match /leaveApplications/{applicationId} {
    //   // Students can create leave applications for themselves
    //   allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    //   // Students can read their own leave applications
    //   // Admins can read any leave application
    //   allow read: if (request.auth != null && request.resource.data.userId == request.auth.uid) || isAdmin();
    //   // Admins can update (approve/reject) leave applications
    //   allow update: if isAdmin();
    //   // Optionally, allow students to delete their PENDING applications, or disallow delete
    //   allow delete: if false; // Or more specific rules for student deletion
    // }

    // Add rules for other collections as needed (e.g., attendance, grades, etc.)
    // For now, assume these are read-only for students for their own data, and full access for admins.

    // Example for a generic student-data collection:
    // match /studentDataCollection/{docId} {
    //   function isStudentOwner() {
    //     return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.studentId == resource.data.studentId;
    //   }
    //   allow read: if isStudentOwner() || isAdmin();
    //   allow write: if isAdmin(); // Typically students don't write directly to these collections from client
    // }
  }
}
