
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user has an 'admin' role.
    // This assumes the admin user document in the 'users' collection
    // has a field `role: 'admin'`.
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      // Allow authenticated users to read and write their own document.
      // This is important for profile management by individual users.
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Allow users with the 'admin' role to perform CRUD operations on any user document.
      // 'list' is required for querying the entire 'users' collection (e.g., admin viewing all users).
      // 'get' is for reading individual user documents.
      // 'create' is for adding new user documents.
      // 'update' is for modifying existing user documents.
      // 'delete' is for removing user documents.
      allow list, get, create, update, delete: if isAdmin();
    }

    // --- Placeholder for future collections ---
    // If you add new collections like 'announcements', 'grades', 'attendance',
    // you will need to add specific rules for them here.
    // Example for publicly readable announcements, writable by admins:
    // match /announcements/{announcementId} {
    //   allow read: if true;
    //   allow write: if isAdmin();
    // }
    //
    // Example for student-specific data (e.g., grades, attendance):
    // match /grades/{studentId}/{gradeEntryId} {
    //   allow read, write: if request.auth != null && request.auth.uid == studentId; // Student can manage their own
    //   allow read: if isAdmin(); // Admins can read
    // }
    // match /attendance/{studentId}/{attendanceRecordId} {
    //   allow read, write: if request.auth != null && request.auth.uid == studentId; // Student can manage their own
    //   allow read: if isAdmin(); // Admins can read
    // }


    // Default deny all other access to any other collections or documents
    // not explicitly defined above. This is a crucial security measure.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
