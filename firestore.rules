
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      let userRole = getUserData(request.auth.uid).role;
      // Also check for hardcoded admin email as a fallback/primary admin
      return isSignedIn() && (userRole == 'admin' || request.auth.token.email == 'admin@gmail.com');
    }

    function isFaculty() {
      // Check if the user has the 'faculty' role in their user document
      return isSignedIn() && getUserData(request.auth.uid).role == 'faculty';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn(); // Any signed-in user can read profiles (e.g., for display names)
      allow create: if isSignedIn(); // Typically, user creation happens via auth triggers or admin panel
      allow update: if isUser(userId) || isAdmin(); // User can update their own profile, admin can update any
      allow delete: if isAdmin(); // Only admin can delete user documents
    }

    // System Settings
    match /systemSettings/appConfiguration {
      allow read: if true; // Publicly readable for app configuration
      allow write: if isAdmin(); // Only admins can change system settings
    }

    // Profile Change Requests
    match /profileChangeRequests/{requestId} {
      allow read, list: if isAdmin(); // Admins can read/list all requests
      allow create: if isUser(request.resource.data.userId); // User can create a request for themselves
      allow update: if isAdmin(); // Admins can update status (approve/deny)
      // No delete for now to keep history
    }

    // Classrooms
    match /classrooms/{classroomId} {
      function isClassroomOwner() {
        return resource.data.ownerFacultyId == request.auth.uid;
      }
      function isInvitedFaculty() {
        return request.auth.uid in resource.data.invitedFacultyIds;
      }
      function isOwnerOrInvitedFacultyRequesting() {
        // For new resources being created
        let classroomData = request.resource.data;
        return classroomData.ownerFacultyId == request.auth.uid || request.auth.uid in classroomData.invitedFacultyIds;
      }
       function isOwnerOrInvitedFacultyExisting() {
        // For existing resources
        let classroomData = resource.data;
        return classroomData.ownerFacultyId == request.auth.uid || request.auth.uid in classroomData.invitedFacultyIds;
      }

      allow read: if isSignedIn() && (isFaculty() && isOwnerOrInvitedFacultyExisting() || isAdmin());
      allow list: if isFaculty() || isAdmin(); // Faculty can list classrooms they might be part of
      allow create: if isFaculty() && request.resource.data.ownerFacultyId == request.auth.uid;
      allow update: if isFaculty() && isClassroomOwner(); // Only owner can update classroom details (like inviting faculty)
      allow delete: if isFaculty() && isClassroomOwner(); // Only owner can delete
    }

    // Lecture Attendance Records
    match /lectureAttendance/{recordId} {
      function isFacultyForRecordClassroom() {
        let classroomDoc = get(/databases/$(database)/documents/classrooms/$(request.resource.data.classroomId)).data;
        return request.auth.uid == classroomDoc.ownerFacultyId || request.auth.uid in classroomDoc.invitedFacultyIds;
      }

      allow create: if isFaculty() && isFacultyForRecordClassroom() && request.resource.data.facultyId == request.auth.uid;
      allow read: if (isUser(resource.data.studentId)) || 
                     (isFaculty() && (
                        get(/databases/$(database)/documents/classrooms/$(resource.data.classroomId)).data.ownerFacultyId == request.auth.uid ||
                        request.auth.uid in get(/databases/$(database)/documents/classrooms/$(resource.data.classroomId)).data.invitedFacultyIds
                     )) ||
                     isAdmin();
      allow list: if isFaculty() || isAdmin(); // Faculty can list for their classrooms, admins for all
      // Update/delete might be restricted, e.g., only by the faculty who created it or admin
      allow update, delete: if (isFaculty() && resource.data.facultyId == request.auth.uid) || isAdmin();
    }
  }
}
