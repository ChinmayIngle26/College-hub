
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow create by anyone (e.g., during sign-up)
      allow create: if request.auth != null; // Or more specific: if request.auth.uid == userId;

      // TEMPORARILY SIMPLIFIED: Allow read if user is authenticated.
      // Original: allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow read: if request.auth != null;

      // Allow update only by the user themselves or an admin
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());

      // Allow delete only by an admin (or by user if needed, carefully)
      allow delete: if isAdmin();
    }

    // Rules for the 'leaveApplications' collection
    match /leaveApplications/{applicationId} {
      // Allow create if user is authenticated. More specific checks are in the function now.
      allow create: if request.auth != null;
      // allow create: if request.auth != null &&
      //                 request.resource.data.studentId == request.auth.uid &&
      //                 request.resource.data.status == 'Pending' &&
      //                 (request.resource.data.studentName is string || request.resource.data.studentName == null) &&
      //                 (request.resource.data.parentEmail is string || request.resource.data.parentEmail == null) &&
      //                 request.resource.data.leaveType is string &&
      //                 request.resource.data.startDate is timestamp &&
      //                 request.resource.data.endDate is timestamp &&
      //                 request.resource.data.endDate >= request.resource.data.startDate &&
      //                 request.resource.data.reason is string &&
      //                 request.resource.data.reason.size() >= 10 &&
      //                 request.resource.data.reason.size() <= 500;
                        // request.resource.data.appliedAt == request.time; // This was removed previously


      // Allow read if the studentId matches auth.uid or user is admin
      allow read: if request.auth != null && (resource.data.studentId == request.auth.uid || isAdmin());

      // Allow update and delete only by admin (e.g., for approving/rejecting leave)
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Collection group query rule for leaveApplications (e.g., if querying across users by admin)
    // For student's own list, the document-level read rule above suffices for security.
    // This allows admins to list all applications if needed, students can list their own via specific query.
    match /leaveApplications {
        allow list: if request.auth != null; // Authenticated users can attempt to list; doc rules will filter
    }


    // Rules for the 'systemSettings' collection
    match /systemSettings/{docId} {
      // Allow read by anyone (even unauthenticated users) for app configuration
      allow read: if true;

      // Allow write (create/update) only by an admin
      allow write: if isAdmin(); // Covers create and update
    }
  }
}
