
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      // Check if the user's document in the 'users' collection has role 'admin'
      // This requires the admin user to have a document in /users/{uid} with a role field.
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User profiles
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.role == 'student'; // Default role on creation
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());
                       // Add specific field validation for updates if needed
                       // e.g., allow student to update their name, but not role
                       // allow update (student): if request.auth.uid == userId && DisallowUpdate(['role']);
                       // allow update (admin): if isAdmin();
      allow delete: if isAdmin(); // Only admins can delete user profiles
    }

    // System-wide settings
    match /systemSettings/{docId} {
      // Anyone can read settings (e.g., for maintenance mode check in middleware)
      allow read: if true;
      // Only admins can write/update settings
      allow write: if isAdmin();
    }

    // Leave Applications
    match /leaveApplications/{applicationId} {
      // SIMPLIFIED CREATE RULE FOR TESTING:
      allow create: if request.auth != null &&
                       request.resource.data.studentId == request.auth.uid;

      // Students can read their own applications, admins can read any.
      allow read: if request.auth != null && (resource.data.studentId == request.auth.uid || isAdmin());

      // Only admins can update or delete leave applications (e.g., to change status)
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Rule for querying/listing leaveApplications
    // Allows authenticated users to make queries.
    // The document-level `read` rule above will then filter the results of the query.
    match /leaveApplications {
      allow list: if request.auth != null;
    }

    // Add rules for other collections (attendance, grades, etc.) as needed.
    // Example for attendance (adjust as per your data model and needs):
    match /attendance/{studentId}/records/{recordId} {
      allow read, list: if request.auth != null && (request.auth.uid == studentId || isAdmin());
      // Add create, update, delete rules if admins or specific services manage this data
    }

    match /grades/{studentId}/courses/{courseId} {
      allow read, list: if request.auth != null && (request.auth.uid == studentId || isAdmin());
      // Add create, update, delete rules
    }
  }
}
