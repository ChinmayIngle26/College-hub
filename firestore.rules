rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if the requesting user is an admin
    function isAdmin() {
      // Ensure request.auth is not null before trying to access request.auth.uid
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User profiles
    match /users/{userId} {
      // Allow users to read their own profile, and admins to read any profile
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());

      // Allow users to create their own profile (e.g., during signup)
      // Allow users to update their own profile
      // Allow admins to create, update, or delete any user profile
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // More granular:
      // allow create: if request.auth != null; // Any authenticated user can create a user document (e.g., on signup)
      // allow update: if request.auth != null && (request.auth.uid == userId || isAdmin()); // User can update own, admin can update any
      // allow delete: if request.auth != null && isAdmin(); // Only admins can delete
    }

    // Allow admins to list all users (needed for User Management in Admin Panel)
    match /users {
      allow list: if request.auth != null && isAdmin();
    }

    // Announcements - Example, adjust as needed
    match /announcements/{announcementId} {
      // Allow any authenticated user to read announcements
      allow read: if request.auth != null;
      // Allow only admins to create, update, or delete announcements
      allow write: if request.auth != null && isAdmin();
    }

    // TODO: Add rules for other collections as your application grows
    // e.g., attendance, grades, appointments, voting
    // Consider who should read/write this data.

    // Example for a 'grades' collection (students can read own, admins can read/write all)
    // match /grades/{studentId}/courses/{courseId} {
    //   allow read: if request.auth != null && (request.auth.uid == studentId || isAdmin());
    //   allow write: if request.auth != null && isAdmin(); // Assuming only admins input/edit grades
    // }
    // match /grades/{studentId} {
    //   allow list: if request.auth != null && (request.auth.uid == studentId || isAdmin()); // For listing courses for a student
    // }

  }
}
