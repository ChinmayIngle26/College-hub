
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // USER DATA
    // Users can:
    // - Read their own document.
    // - Create their own document upon signup (with specific constraints).
    // - Update their own document.
    // - Delete their own document (less common, consider implications).
    // Admins can:
    // - Read any user document.
    // - Create, update, or delete any user document.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && request.auth.uid == userId; // Allow user to create their own doc
      allow update: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow delete: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Disallow direct listing of all users for non-admins.
      // Admins might list users through a backend function or specific query if needed,
      // but direct client-side list is often restricted.
      // For the admin panel to list users, this rule needs to be adjusted if listing directly.
      // However, the admin panel currently fetches users and the isAdmin check is client-side,
      // so this rule assumes listing is for admins:
      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // SYSTEM SETTINGS
    // - Public read access: Needed for generateMetadata in Next.js layout, theme, etc.
    // - Admin-only write access: Only admins can change system-wide configurations.
    match /systemSettings/{docId} {
      allow read: if true; // Allow public read for app configuration
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Create, update, delete are covered by 'write'.
      // No listing needed as it's typically a single document 'appConfiguration'.
    }

    // ATTENDANCE RECORDS
    // - Users can read their own attendance.
    // - Admins can potentially read all attendance (if required, not explicitly defined yet).
    // - Writing attendance might be restricted to specific roles or backend processes.
    match /attendance/{studentId}/records/{recordId} {
      allow read: if request.auth != null && (request.auth.uid == studentId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      // allow write: if ...; // Define who can write attendance
    }
    // Example for listing own attendance records
    match /attendance/{studentId}/records {
        allow list: if request.auth != null && request.auth.uid == studentId;
    }


    // GRADES
    // - Users can read their own grades.
    // - Admins can potentially read all grades.
    // - Writing grades is typically highly restricted.
    match /grades/{studentId}/courses/{courseId} {
      allow read: if request.auth != null && (request.auth.uid == studentId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      // allow write: if ...; // Define who can write grades
    }
    // Example for listing own grades
     match /grades/{studentId}/courses {
        allow list: if request.auth != null && request.auth.uid == studentId;
    }

    // ANNOUNCEMENTS (assuming these are globally readable, admin-managed content)
    match /announcements/{announcementId} {
      allow read: if true; // Publicly readable
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
     match /announcements {
        allow list: if true; // Publicly listable
    }

    // Add rules for other collections (appointments, voting, etc.) as needed.
    // Example:
    // match /appointments/{userId}/{appointmentId} {
    //   allow read, write: if request.auth != null && request.auth.uid == userId;
    // }
  }
}

    