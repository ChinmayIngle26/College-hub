
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User Management Rules
    // Allows authenticated users to read their own data.
    // Allows authenticated users to create their own user document upon signup (with specific constraints).
    // Allows admins to read, write, create, and delete any user document.
    match /users/{userId} {
      // Any authenticated user can read their own document.
      // Admins can read any user document.
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Users can create their own document if they are authenticated and the document ID matches their UID.
      // Admins can create any user document.
      // Ensure that on creation, a user can only set their role to 'student' unless they are an admin.
      allow create: if request.auth != null &&
                      (
                        (request.auth.uid == userId && request.resource.data.role == 'student') ||
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                      );


      // Users can update their own document.
      // Admins can update any user document.
      // Prevent users from changing their own role unless they are an admin.
      allow update: if request.auth != null &&
                      (
                        (request.auth.uid == userId && request.resource.data.role == resource.data.role) || // User can update their own doc, but not change their role
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' // Admin can update anything
                      );

      // Users can delete their own document (consider if this is desired behavior).
      // Admins can delete any user document.
      allow delete: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Explicitly deny access to subcollections under user documents unless specified otherwise
      match /{document=**} {
        allow read, write: if false;
      }
    }

    // Rule to allow admins to list all users (needed for User Management in admin panel)
    match /users {
        allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }


    // System Settings Rules
    // Allows only admins (identified by their email or a role in their user document) to read and write system settings.
    // Assumes there's a single document for system settings, e.g., /systemSettings/appConfiguration
    match /systemSettings/{settingsDocId} {
      // Admins can read and write.
      // Other authenticated users might be allowed to read specific settings if needed, but default to admin-only write.
      allow read: if request.auth != null; // Allows any authenticated user to read settings (e.g. for app name, maintenance mode client-side checks)
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Explicitly deny access to subcollections under systemSettings documents unless specified otherwise
      match /{document=**} {
        allow read, write: if false;
      }
    }

    // General Deny Rule (Optional but good practice)
    // Deny all reads and writes to any other path by default if not explicitly allowed.
    // This is implicitly handled if no other rules match, but can be made explicit.
    // match /{path=**}/documents/{document} {
    //   allow read, write: if false;
    // }
  }
}
