
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == "admin@gmail.com";
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // Users can create their own profile document during signup
      allow create: if request.auth != null && request.auth.uid == userId;
      // Users can update their own profile, admins can update any
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // Only admins can delete user profiles from the admin panel
      allow delete: if request.auth != null && isAdmin();

      // Prevent access to subcollections within a user document unless specified
      match /{document=**} {
        allow read, write: if false;
      }
    }

    // System Settings
    // Publicly readable for app config, admin write only
    match /systemSettings/{docId} {
      allow read: if true; // App configuration needs to be readable by all (e.g., for metadata, maintenance status)
      allow create, update, delete: if request.auth != null && isAdmin();

      // Prevent access to subcollections
      match /{document=**} {
        allow read, write: if false;
      }
    }

    // Leave Applications
    // Rules for individual document access
    match /leaveApplications/{applicationId} {
      // Students can create their own applications
      allow create: if request.auth != null && request.resource.data.studentId == request.auth.uid;

      // Students can read their own applications, admins can read any
      allow read: if request.auth != null && (resource.data.studentId == request.auth.uid || isAdmin());

      // Admins can update/delete any application (e.g., to change status)
      // Students should not be able to update/delete their applications directly once submitted
      allow update, delete: if request.auth != null && isAdmin();
    }

    // Rules for querying the /leaveApplications collection
    match /leaveApplications {
      // Allow list operation if:
      // 1. The user is an admin (can list all applications).
      // OR
      // 2. The authenticated user is querying for their own applications.
      //    This relies on the client-side query including `where('studentId', '==', request.auth.uid)`.
      //    Firestore security rules for list operations check if the query *could* return documents
      //    that the user is not allowed to read based on document-level 'read' rules.
      //    The `request.query.filters` approach is more robust for explicitly allowing scoped queries.
      allow list: if request.auth != null && 
                    (isAdmin() || 
                     (request.query.filters.find(f => f[0] == 'studentId' && f[1] == '==' && f[2] == request.auth.uid) != null)
                    );
    }

    // Fallback for any other unspecified paths - deny all
    // This ensures that any path not explicitly matched above is secured by default.
    match /{path=**}/documents/{document} {
      allow read, write: if false;
    }
  }
}
