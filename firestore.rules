
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is faculty
    function isFaculty() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }

    // Helper function to check if the requester is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users Collection
    // - Students can read their own profile.
    // - Admins can read, list, create, update, delete any user profile.
    // - Faculty can read any user profile (e.g., for student details).
    // - Faculty can list users (e.g., for adding students to classrooms).
    match /users/{userId} {
      allow read: if request.auth != null && (isOwner(userId) || isAdmin() || isFaculty());
      allow list: if isAdmin() || isFaculty(); // Admins and Faculty can list users
      allow create: if isAdmin(); // Only admins can create new user docs (e.g. via admin panel)
                                  // Student signup creates their own doc, handled by 'allow create: if isOwner(userId)' if needed, but user.role is set by server.
                                  // For now, admin panel is the primary creator of comprehensive profiles.
      allow update: if isAdmin() || (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'contactNumber', 'profilePhotoUrl', 'currentAddress', 'gender', 'dateOfBirth', 'bloodGroup', 'emergencyContactName', 'emergencyContactNumber', 'academicAdvisorName', 'sectionOrBatch', 'modeOfAdmission', 'idCardUrl', 'admissionLetterUrl', 'marksheet10thUrl', 'marksheet12thUrl', 'migrationCertificateUrl', 'bonafideCertificateUrl', 'uploadedPhotoUrl', 'uploadedSignatureUrl', 'admitCardUrl', 'internalExamTimetableUrl', 'externalExamTimetableUrl', 'resultsAndGradeCardsUrl', 'revaluationRequestLink'])); // Admins can update anything. Students can update specific non-critical fields.
      allow delete: if isAdmin();
    }

    // System Settings
    // - Allow anyone to read (e.g., for maintenance mode check by middleware, application name in title)
    // - Only admins can write/update system settings
    match /systemSettings/{docId} {
      allow read: if true; // Publicly readable for settings like maintenance mode or app name
      allow write: if isAdmin(); // Only admins can change settings
    }

    // Profile Change Requests
    // - Authenticated users (students) can create requests for their own profile.
    // - Admins can read, list, and update (approve/deny) requests.
    // - Students can read their own requests.
    match /profileChangeRequests/{requestId} {
      allow read: if request.auth != null && (isAdmin() || resource.data.userId == request.auth.uid);
      allow list: if isAdmin();
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // User can create request for themselves
      allow update: if isAdmin(); // Admins can update status (approve/deny)
      allow delete: if false; // Keep records for auditing, no direct deletion for now
    }

    // Classrooms Collection (Placeholder for Faculty Features)
    // - Faculty can create classrooms.
    // - Faculty can read/list/update/delete classrooms they own.
    // - Students might read classrooms they are part of (logic to be defined).
    // - Admins can manage all classrooms.
    match /classrooms/{classroomId} {
      allow read: if request.auth != null; // Students can read if member (TBD), Faculty their own, Admin all
      allow list: if isAdmin() || isFaculty();
      allow create: if isFaculty();
      allow update, delete: if isAdmin() || (isFaculty() && resource.data.facultyId == request.auth.uid);
    }

    // Attendance Records Collection (Placeholder for Faculty Features)
    // - Faculty can create attendance records for their classrooms.
    // - Students can read their own attendance.
    // - Faculty can read/list attendance for their classrooms.
    // - Admins can manage all attendance.
    match /attendanceRecords/{recordId} {
      allow read: if request.auth != null; // Students their own, Faculty for their classes, Admin all
      allow list: if isAdmin() || isFaculty();
      allow create: if isFaculty();
      allow update, delete: if isAdmin() || (isFaculty() && resource.data.facultyId == request.auth.uid); // Assuming facultyId is on the record
    }

    // Add other collections and their rules below as needed
    // Example:
    // match /courses/{courseId} {
    //   allow read: if request.auth != null;
    //   allow write: if isAdmin();
    // }
  }
}
