
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isFaculty() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }

    // Users collection
    match /users/{userId} {
      // Allow users to read their own profile
      allow read: if isUser(userId) || isAdmin() || isFaculty(); // Faculty might need to read student names for classroom
      // Allow users to create their own profile document during signup (or admin can create)
      allow create: if isAuthenticated() || isAdmin();
      // Allow users to update their own profile, or admin to update any profile
      allow update: if isUser(userId) || isAdmin();
      // Admins can delete user documents (handle with care - might orphan auth user)
      allow delete: if isAdmin();
    }

    // System Settings
    match /systemSettings/{docId} {
      // Allow anyone to read system settings (e.g., for maintenance mode, app name)
      allow read: if true;
      // Only admins can write to system settings
      allow write: if isAdmin();
    }

    // Profile Change Requests
    match /profileChangeRequests/{requestId} {
      // Students can create requests (for themselves - checked in service logic by using request.auth.uid for userId field)
      allow create: if isAuthenticated();
      // Students can read their own requests, Admins/Faculty can read all
      allow read, list: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin() || isFaculty()); // isFaculty added for potential future use
      // Only Admins can update (approve/deny) requests
      allow update: if isAdmin();
      // Disallow delete for now to keep records
      allow delete: if false;
    }

    // Classrooms collection
    match /classrooms/{classroomId} {
      // Faculty can create classrooms (facultyId will be set to their UID by service)
      allow create: if isFaculty();
      // Faculty can read classrooms they own or are a part of (if we add a members field later). Admin can read all.
      allow read, list: if isFaculty() || isAdmin(); // Simplified: Faculty can list all for now, service filters
      // Faculty can update classrooms they own. Admin can update all.
      allow update: if (isFaculty() && resource.data.facultyId == request.auth.uid) || isAdmin();
      // Faculty can delete classrooms they own. Admin can delete all.
      allow delete: if (isFaculty() && resource.data.facultyId == request.auth.uid) || isAdmin();
    }

    // Lecture Attendance collection
    match /lectureAttendance/{attendanceId} {
      // Faculty can create attendance records for their lectures/classrooms
      allow create: if isFaculty();
      // Students can read their own attendance. Faculty can read attendance they submitted or for their classrooms. Admins can read all.
      allow read, list: if isAdmin() || 
                       (isFaculty() && resource.data.facultyId == request.auth.uid) ||
                       (isAuthenticated() && resource.data.studentId == request.auth.uid);
      // Generally, attendance records are immutable once created. Updates might be restricted to admins for corrections.
      allow update: if isAdmin();
      allow delete: if isAdmin(); // Or if isFaculty() and owns the record
    }

    // --- Collections from previous features (ensure they are still covered or remove if not needed) ---

    // Example: Attendance Records (if this was the old student-submitted one, it might need adjustment or removal)
    // If this is replaced by lectureAttendance, these rules might be obsolete.
    // For now, assuming it might still be used or needs explicit new rules.
    // match /attendanceRecords/{studentId}/records/{recordId} {
    //   allow read, write: if isUser(studentId) || isAdmin();
    // }

    // Example: Grades (similar to attendance)
    // match /grades/{studentId}/courses/{courseId} {
    //  allow read: if isUser(studentId) || isAdmin();
    //  allow write: if isAdmin(); // Only admins can write grades
    // }
  }
}
