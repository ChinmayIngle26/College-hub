
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read and write any user document
      allow read, write: if isAdmin();
      // Authenticated users can read their own profile
      allow get: if request.auth != null && isOwner(userId);
      // Authenticated users can create their own profile (e.g., on signup)
      // This might be too open if signup process handles this. Adjust if needed.
      allow create: if request.auth != null && isOwner(userId) && request.resource.data.role == 'student';
      // Authenticated users can update *specific fields* of their own profile.
      // More granular control will be needed for which fields are student-editable vs admin-only.
      // For now, allow general update if owner, but this needs refinement for critical fields.
      // A more secure approach would be to list allowed updatable fields.
      allow update: if request.auth != null && isOwner(userId);
      // Students should generally not be able to delete their own user document.
      allow delete: if isAdmin();
    }

    // Rules for the 'systemSettings' collection
    match /systemSettings/{docId} {
      // Anyone can read system settings (e.g., for maintenance mode, app name)
      allow get: if true;
      // Only admins can write to system settings
      allow write: if isAdmin();
    }

    // Rules for the 'profileChangeRequests' collection
    match /profileChangeRequests/{requestId} {
      // Admins can read, write, create, and delete any request
      allow read, write, create, delete: if isAdmin();
      // Authenticated users can create their own requests
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Authenticated users can read their own requests
      allow get: if request.auth != null && resource.data.userId == request.auth.uid;
      // Users should not directly update or delete their requests once submitted, only admins.
    }

    // Add rules for other collections as needed (e.g., attendance, grades)
    // Example:
    // match /attendance/{studentId}/records/{recordId} {
    //   allow read: if request.auth != null && (isOwner(studentId) || isAdmin());
    //   allow write: if isAdmin(); // Or if a teacher role exists
    // }
  }
}
