
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return request.auth != null && request.auth.token.email == "admin@gmail.com";
    }

    // User profiles
    // Users can create their own profile.
    // Users can read and update their own profile. Admins can read/update any profile.
    // Admins can delete user profiles.
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow delete: if isAdmin();

      // Deny access to any subcollections under users by default
      match /{document=**} {
        allow read, write: if false;
      }
    }

    // System Settings
    // System settings are publicly readable.
    // Only admins can create, update, or delete system settings.
    match /systemSettings/{docId} {
      allow read: if true; // Allow public read for settings like app name, maintenance mode
      allow write: if isAdmin(); // create, update, delete

      // Deny access to any subcollections under systemSettings by default
      match /{document=**} {
        allow read, write: if false;
      }
    }

    // Leave Applications
    // Students can create their own leave applications.
    // Students can read their own leave applications. Admins can read all.
    // Only admins can update (e.g., approve/reject) or delete leave applications.
    match /leaveApplications/{applicationId} {
      allow create: if request.auth != null && request.resource.data.studentId == request.auth.uid;
      allow read: if request.auth != null && (resource.data.studentId == request.auth.uid || isAdmin());
      allow update, delete: if isAdmin();

      // Deny access to any subcollections under leaveApplications by default
      match /{document=**} {
        allow read, write: if false;
      }
    }

    // Rule for querying the leaveApplications collection
    // Authenticated users can list applications.
    // The actual documents returned will be filtered by the document-level `read` rule above.
    // This means students querying with `where('studentId', '==', their_uid)` will only get their own.
    // Admins can query more broadly.
    match /leaveApplications {
      allow list: if request.auth != null;
    }

    // Default deny for any other paths not explicitly matched
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
