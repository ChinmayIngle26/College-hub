
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // Users can:
    // - Read their own document.
    // - Create their own document upon signup (ensuring uid matches and role is 'student' unless by admin).
    // - Update their own document (specific fields might be restricted further if needed).
    // Admins can:
    // - Read, create, update, delete any user document.
    match /users/{userId} {
      allow read: if request.auth != null && 
                    (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      allow create: if request.auth != null && 
                      (
                        (request.auth.uid == userId && request.resource.data.role == 'student' && आनाकानीresource.data.keys().hasAll(['name', 'studentId', 'major', 'email', 'parentEmail', 'role'])) || 
                        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
                      );

      allow update: if request.auth != null && 
                      (
                        (request.auth.uid == userId) ||  // Allow user to update their own profile
                        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') // Allow admin to update any profile
                      );
                      // Note: For user self-update, you might want to restrict which fields they can update.
                      // e.g., !request.resource.data.keys().hasAny(['role']) for self-updates

      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Prevent access to subcollections within a user document by default
      match /{document=**} {
        allow read, write: if false;
      }
    }

    // Allow admins to list all users (needed for User Management in admin panel)
    match /users {
        allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // System Settings
    // - Only admins (identified by email or role) can write/update.
    // - Public read access is often needed for settings like applicationName (e.g., for metadata).
    match /systemSettings/{docId} {
      allow read: if true; // Public read access for application settings
      allow create, update, delete: if request.auth != null && 
                                      (request.auth.token.email == 'admin@gmail.com' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      // Prevent access to subcollections by default
      match /{document=**} {
        allow read, write: if false;
      }
    }

    // Leave Applications Collection
    match /leaveApplications/{leaveAppId} {
      allow create: if request.auth != null && request.resource.data.studentId == request.auth.uid;
                    // Ensure all required fields are present
                    // && request.resource.data.keys().hasAll(['studentId', 'studentName', 'parentEmail', 'leaveType', 'startDate', 'endDate', 'reason', 'status', 'appliedAt']);
      allow read: if request.auth != null && 
                    (request.auth.uid == resource.data.studentId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admin can update status for now
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
     match /leaveApplications {
        allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Admin can list all
                      // Students list their own on the client-side using a query with where('studentId', '==', auth.uid)
    }


    // Deny all other access by default
    match /{path=**}/documents/{document} {
      allow read, write: if false;
    }
  }
}
