rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ‚úÖ Checks if the authenticated user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // ‚úÖ Checks if the authenticated user is a faculty
    function isFaculty() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }

    // ‚úÖ Checks if the user is the owner of the classroom with the given ID
    function isClassroomOwner(classroomId) {
      return exists(/databases/$(database)/documents/classrooms/$(classroomId)) &&
             request.auth.uid == get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerFacultyId;
    }

    // ‚úÖ Checks if the user is either the owner or an invited faculty of a classroom
    function isOwnerOrInvitedFaculty(classroomId) {
      return exists(/databases/$(database)/documents/classrooms/$(classroomId)) &&
        (
          request.auth.uid == get(/databases/$(database)/documents/classrooms/$(classroomId)).data.ownerFacultyId ||
          (
            get(/databases/$(database)/documents/classrooms/$(classroomId)).data.invitedFacultyIds is list &&
            request.auth.uid in get(/databases/$(database)/documents/classrooms/$(classroomId)).data.invitedFacultyIds
          )
        );
    }

    // üìÅ USERS Collection Rules
    match /users/{userId} {
      // Allow the user to read their own profile or if admin/faculty
      allow read: if request.auth.uid == userId || isAdmin() || isFaculty();

      // Only admins can create new user documents directly
      allow create: if isAdmin();

      // Users can update their own profile, or admins can update any
      allow update: if request.auth.uid == userId || isAdmin();

      // Only admins can delete user documents
      allow delete: if isAdmin();
    }

    // ‚öôÔ∏è SYSTEM SETTINGS Collection Rules
    match /systemSettings/{docId} {
      // Publicly readable settings (like app name, maintenance flag)
      allow read: if true;

      // Only admins can update system settings
      allow write: if isAdmin();
    }

    // üìÑ PROFILE CHANGE REQUESTS Collection Rules
    match /profileChangeRequests/{requestId} {
      // Only the user whose profile it is can submit a request
      allow create: if request.auth.uid == request.resource.data.userId;

      // Admin-only access for all other operations
      allow read, list, update, delete: if isAdmin();
    }

    // üè´ CLASSROOMS Collection Rules
    match /classrooms/{classroomId} {
      // Only faculty members can create a classroom, and only for themselves
      allow create: if isFaculty() && request.auth.uid == request.resource.data.ownerFacultyId;

      // Only owner or invited faculty can read classroom
      allow read: if isFaculty() && isOwnerOrInvitedFaculty(classroomId);

      // Only the owner faculty can update/delete
      allow update, delete: if isFaculty() && isClassroomOwner(classroomId);
    }

    // üìä LECTURE ATTENDANCE Collection Rules
    match /lectureAttendance/{recordId} {
      // Only faculty listed in the classroom and assigned can create
      allow create: if isFaculty() &&
                    isOwnerOrInvitedFaculty(request.resource.data.classroomId) &&
                    request.auth.uid == request.resource.data.facultyId;

      // Students can read their own attendance, faculty can read if assigned
      allow read: if request.auth.uid == resource.data.studentId ||
                  (isFaculty() && isOwnerOrInvitedFaculty(resource.data.classroomId));

      // Allow listing by faculty (ensure client filters properly)
      allow list: if isFaculty();

      // No updates or deletes allowed to maintain attendance integrity
      allow update, delete: if false;
    }
  }
}
