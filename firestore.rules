
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user has an 'admin' role in their Firestore document.
    // This function is crucial for all admin-specific permissions.
    function isAdmin() {
      // 1. Ensure the user is authenticated.
      // 2. Fetch the user's document from the 'users' collection using their UID.
      // 3. Check if the 'role' field in that document is 'admin'.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User Profiles
    // Users can read their own profile.
    // Admins can read, list, create, update, and delete user profiles.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow list: if isAdmin();
      // User signup (creates their own document) or admin creates a user document.
      // When a user signs up, request.auth.uid == userId.
      // When an admin creates a user, the isAdmin() check applies.
      allow create: if (request.auth != null && request.auth.uid == userId && request.resource.data.email == request.auth.token.email) || isAdmin();
      // Admins can update any profile. Specific rules for student self-updates would be added here.
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // System Settings
    // Publicly readable for application configuration (like app name, maintenance mode).
    // Only admins can write/update system settings.
    match /systemSettings/{docId} {
      allow read: if true; // Allow all authenticated and unauthenticated users to read settings
      allow write, update: if isAdmin(); // Only admins can change settings
    }

    // Profile Change Requests
    // Students can create requests for their own profile.
    // Admins can manage (read, list, update status) all requests.
    match /profileChangeRequests/{requestId} {
      // Ensure the user is authenticated and the request is for their own userId.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Admins can read individual requests or list all requests.
      allow read, list: if isAdmin();
      // Admins can update requests (e.g., to approve or deny by changing status and adding notes).
      allow update: if isAdmin();
      // Deletion of requests might be restricted to maintain audit trails.
      // allow delete: if isAdmin();
    }

    // Default deny for any other collections/paths not explicitly matched.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
