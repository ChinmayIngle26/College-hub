rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin.
    // It reads the 'role' field from the user's own document in the 'users' collection.
    function isAdmin() {
      // Ensure request.auth is not null before trying to access its properties
      return request.auth != null &&
             // Ensure the user document exists and has a 'role' field before checking its value
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow authenticated users to:
      // - Read their own profile (e.g., on dashboard, profile page).
      // - Create their own profile document (e.g., during sign-up).
      // - Update their own profile document.
      allow read, create, update: if request.auth != null && request.auth.uid == userId;

      // Allow admin users to:
      // - Get (read) any specific user's document.
      // - List all user documents (for the admin panel user list).
      // - Create new user documents (admin creating users).
      // - Update any user's document (admin editing users - if implemented).
      // - Delete any user's document (admin deleting users).
      allow get, list, create, update, delete: if isAdmin();

      // Note on 'write' vs specific operations:
      // 'write' is a shorthand for 'create, update, delete'.
      // By specifying them individually, we have clearer intent.
      // The rules are effectively OR'd. If a user is an admin, they get full CRUD.
      // If a user is not an admin, they only get read, create (own), update (own).
    }

    // Placeholder for future collections. If you add more collections like
    // 'attendance', 'grades', 'announcements' directly in Firestore (not as mock data),
    // you'll need to add rules for them.
    // Example for a subcollection if attendance was stored under each user:
    // match /users/{userId}/attendance/{recordId} {
    //   // User can manage their own attendance records
    //   allow read, write: if request.auth != null && request.auth.uid == userId;
    //   // Admin can read anyone's attendance records
    //   allow read: if isAdmin();
    // }

    // Example for a global 'announcements' collection (if not mock):
    // match /announcements/{announcementId} {
    //   allow read: if request.auth != null; // All authenticated users can read
    //   allow write: if isAdmin(); // Only admins can create/edit/delete announcements
    // }
  }
}